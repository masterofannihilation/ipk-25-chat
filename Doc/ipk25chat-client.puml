@startuml

class Main 
{
    -StartTcpClient(CliArgParser argParser): Task
}

class CliArgParser
{
    +Protocol: string
    +Server: string
    +Port: int 
    +Timeout: int
    +MaxRetries: int
    +ParseCliArgs(args: string[]): void
    +PrintArgs(): void
}

class TcpChatClient 
{
    - _host: string
    - _port: string
    - _state: State
    - _displayName: string
    - _userInput = Channel
    +RunAsync(): Task
    -RegisterCancelKeyPress(): void
    -ReadUserInput(): Task
    -ProcessUserInputAsync(): Task
    -ProcessOutgoingMessageAsync(clientMsgParser: ClientMsgParser, input: string): Task
    -UpdateDisplayNameIfNeeded(clientMsgParser: ClientMsgParser, msgType: MessageType): void
    -TerminateConnectionIfEndState(): Task
    -SendByeMessage(): Task
    -SendMessageAsync(formattedMessage: string): Task
    -WaitForResponseFromServerAsync(): Task
    -ProcessServerInputAsync(): Task
    -ProcessReceivingMessageAsync(buffer: byte[], bytesRead: int, serverMsgParser: ServerMsgParser): Task
    -Disconnect(): Task
    -ShowHelp(): void
}

enum MessageType
{
    Auth = 0x02,
    Join = 0x03,
    Msg = 0x04,
    Rename = 0xA1,
    Help = 0xA2,
    Err = 0xFE,
    Reply = 0x01,
    NotReply = 0xA3,
    Bye = 0xFF,
    Confirm = 0x00,
    Ping = 0xFD,
    Unknown = 0xA4
}

interface IMsgParser
{
    +ParseMsg(msg: string): string
    +GetMsgType(msg: string): MessageType
}

class ClientMsgParser
{
    - _displayName : string
    - _validator : MsgValidator
    +ParseMsg(msg: string): string
    +GetMsgType(msg: string): MessageType
    +GetDisplayName(): string
    -GetAuthMessage(msg: string): string
    -GetJoinMessage(msg: string): string
    -GetNormalMessage(msg: string): string
    -ChangeDisplayName(msg: string): string
    -ShowHelp(): string
}

class MsgValidator {
    +ValidateFormat(type: MessageType, msg: string): bool
    +GetContent(msg: string, delimiter: string): string
    -IsValidReplyMsg(msg: string): bool
    -IsValidByeMsg(msg: string): bool
    -IsValidAuthMsg(msg: string): bool
    -IsValidJoinMsg(msg: string): bool
    -IsValidNormalMsg(msg: string): bool
    -CheckMessageLength(msg: string): string
    -IsValidErrMsg(msg: string): bool
    -IsValidId(id: string): bool
    -IsValidSecret(secret: string): bool
    -IsValidDisplayName(displayName: string): bool
    -IsValidContent(message: string): bool
}

class ServerMsgParser
{
    - _validator : MsgValidator
    +ParseMsg(msg: string): string
    +GetMsgType(msg: string): MessageType
    -ParseNormalMessage(msg: string): string
    -ParseErrorMessage(msg: string): string
    -ParseReplyMessage(msg: string): string
    -ParseNotReplyMessage(msg: string): string
}

class State {
    +CurrentState : StateType
    +ProcessEvent(msgType: MessageType): void
    +IsMessageTypeAllowed(type: MessageType): bool
}

enum StateType {
    Start
    Auth
    Open
    Join
    End
}

IMsgParser --> MessageType 
IMsgParser ..|> ClientMsgParser
IMsgParser ..|> ServerMsgParser

TcpChatClient --> ClientMsgParser
TcpChatClient --> ServerMsgParser
TcpChatClient --> State

ClientMsgParser --> MsgValidator
ServerMsgParser --> MsgValidator

State --> StateType
State --> MessageType

Main --> TcpChatClient
Main --> CliArgParser

@enduml